
#Область ПрограммныйИнтерфейс

//Считывает из каталога на диске файлы, выгруженные оборудованием
// 
Процедура СчитатьФайлыНаСервере() Экспорт
	
	КаталогФайлов = Константы.revagro_КаталогСФайлами.Получить();
	
    ФайлыВКаталоге = НайтиФайлы(КаталогФайлов, "*");

	НастройкиФайлов = ПолучитьНастройкиФайлов();
		
	Для Каждого ФайлКЗагрузке Из ФайлыВКаталоге Цикл  
		
		МассивРазрешенныхРасширений = Новый Массив;
		МассивРазрешенныхРасширений.Добавить(".csv");
		МассивРазрешенныхРасширений.Добавить(".xlsx");
		Если МассивРазрешенныхРасширений.Найти(ФайлКЗагрузке.Расширение) = Неопределено Тогда
			Продолжить;		
		КонецЕсли; 
		
		МЗФайлыЗагруженные = РегистрыСведений.revagro_ФайлыЗагруженные.СоздатьМенеджерЗаписи();
		МЗФайлыЗагруженные.ИмяФайла = ФайлКЗагрузке.Имя;
		МЗФайлыЗагруженные.Прочитать();
		Если НЕ МЗФайлыЗагруженные.Выбран() Тогда
			МЗФайлыЗагруженные.ИмяФайла = ФайлКЗагрузке.Имя;
		КонецЕсли;
		МЗФайлыЗагруженные.ДатаПоследнейПопытки = ТекущаяДатаСеанса();
		МЗФайлыЗагруженные.НомерПопытки = МЗФайлыЗагруженные.НомерПопытки + 1;
        МЗФайлыЗагруженные.Успешно = Истина;
		МЗФайлыЗагруженные.Комментарий = "";
		
		Попытка  
			
			НастройкаТекущегоФайла = ПолучитьНастройкуТекущегоФайла(ФайлКЗагрузке, НастройкиФайлов);   
			
			НЗДанныеСОборудования = РегистрыСведений.revagro_ДанныеСОборудования.СоздатьНаборЗаписей(); 
			НЗДанныеСОборудования.Отбор.ИмяФайла.Установить(ФайлКЗагрузке.Имя);
			
			КонтекстЧтения = Новый Структура;
			КонтекстЧтения.Вставить("ТекстОшибки","");
			КонтекстЧтения.Вставить("Отказ",Ложь);
			КонтекстЧтения.Вставить("НастройкиЧтения",НастройкаТекущегоФайла);
			КонтекстЧтения.Вставить("ДанныеJSON",Неопределено);
			КонтекстЧтения.Вставить("НаборЗаписей",НЗДанныеСОборудования);
			
			Если ФайлКЗагрузке.Расширение = ".csv" Тогда
				СчитатьФайлCSVНаСервере(ФайлКЗагрузке, НастройкаТекущегоФайла, КонтекстЧтения);	
			ИначеЕсли ФайлКЗагрузке.Расширение = ".xlsx" Тогда
				СчитатьФайлXLSXНаСервере(ФайлКЗагрузке, НастройкаТекущегоФайла, КонтекстЧтения);	
			КонецЕсли; 
			
			КаталогХранения = ФайлКЗагрузке.Путь;
			Если Прав(КаталогХранения, 1) <> "/" Тогда
				КаталогХранения = КаталогХранения + "/"; 	
			КонецЕсли;
			
			ПереместитьФайл(
				ФайлКЗагрузке.ПолноеИмя, 
				СтрШаблон(
					"%1архив/%2", 
					ФайлКЗагрузке.Путь, 
					ФайлКЗагрузке.Имя)
			);   
			
		Исключение   
			МЗФайлыЗагруженные.Успешно = Ложь;
			МЗФайлыЗагруженные.Комментарий = ИнформацияОбОшибке().Описание;	
		КонецПопытки;
		
		НЗДанныеСОборудования.Записать(Истина);
		МЗФайлыЗагруженные.Записать(Истина);
	КонецЦикла                           
	
КонецПроцедуры  

// Считывает файл формата csv
//
// Параметры:
// 	Файл - Файл - объект считанного файла,
// 	НастройкиЧтения - Структура - ссылка настройки 
// 	КонтекстЧтения - Структура - сопутствующие параметры чтения
//
Процедура СчитатьФайлCSVНаСервере(Файл, НастройкиЧтения, КонтекстЧтения) Экспорт
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.Прочитать(Файл.ПолноеИмя); 
	
	МассивДанных = Новый Массив;  
	Разделитель = ";";
		
	Если ТекстовыйФайл.КоличествоСтрок() Тогда
		Колонки = ТекстовыйФайл.ПолучитьСтроку(1);
		МассивКолонок = СтрРазделить(Колонки, Разделитель, Ложь);  
		ПроверитьСоответствиеКолонокФайлу(МассивКолонок, НастройкиЧтения);
		
		Для НомерСТроки = 2 По ТекстовыйФайл.КоличествоСтрок() Цикл  
			СтруктураСтроки = Новый Соответствие;
			ДанныеСтроки = СтрРазделить(ТекстовыйФайл.ПолучитьСтроку(2), Разделитель, Истина);
			Для НомерКолонки = 0 По МассивКолонок.ВГраница() Цикл  
				НаименованиеКолонкиБД = НастройкиЧтения.СоответствиеКолонок[МассивКолонок[НомерКолонки]];
				СтруктураСтроки.Вставить(НаименованиеКолонкиБД, ДанныеСтроки[НомерКолонки]); 	
			КонецЦикла; 
			МассивДанных.Добавить(СтруктураСтроки); 
			
			СтруктураСтрокиРС = ПолучитьПустуюСтруктуруЗаполненияСтрокиРСДанныеСОборудования();
			
			СтруктураСтрокиРС.ИмяФайла = Файл.Имя;
			СтруктураСтрокиРС.ПорядковыйНомерСтроки = НомерСТроки;
			СтруктураСтрокиРС.ДанныеСтрокиJSON = ПолучитьJSON(СтруктураСтроки);
			СтруктураСтрокиРС.ДатаОперации = Дата(СтруктураСтроки["МоментВремени"]);
			СтруктураСтрокиРС.ТипОтчета = НастройкиЧтения.ТипОтчета;
			
			СтрДанныеСОборудования = КонтекстЧтения.НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрДанныеСОборудования, СтруктураСтрокиРС);
			
		КонецЦикла 	
	КонецЕсли;
	
	КонтекстЧтения.ДанныеJSON = ПолучитьJSON(МассивДанных);
	
КонецПроцедуры 

// Считывает файл формата xlsx
//
// Параметры:
// 	Файл - Файл - объект считанного файла,
// 	НастройкиЧтения - Структура - ссылка настройки 
// 	КонтекстЧтения - Структура - сопутствующие параметры чтения
//
Процедура СчитатьФайлXLSXНаСервере(Файл, НастройкиЧтения, КонтекстЧтения) Экспорт
		
	ТабличныйДокумент = Новый ТабличныйДокумент();
	ТабличныйДокумент.Прочитать(Файл.ПолноеИмя, СпособЧтенияЗначенийТабличногоДокумента.Значение); 
	
	МассивДанных = Новый Массив;  
	Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда 
		ПозицияКолонок = 2;
		МассивКолонок = Новый Массив;
		
		Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
			ЗначениеЯчейки = ПолучитьЗначениеЯчейки(ТабличныйДокумент, ПозицияКолонок, НомерКолонки);
			Если НЕ ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				Прервать;	
			КонецЕсли; 
			МассивКолонок.Добавить(СокрЛП(СтрЗаменить(ЗначениеЯчейки, Символы.ПС, "")));
		КонецЦикла;  
		
		ПроверитьСоответствиеКолонокФайлу(МассивКолонок, НастройкиЧтения);
		
		Для НомерСтроки = 3 По ТабличныйДокумент.ВысотаТаблицы Цикл 
			СтруктураСтроки = Новый Соответствие;
			Для НомерКолонки = 0 По МассивКолонок.ВГраница() Цикл  
				НаименованиеКолонкиБД = НастройкиЧтения.СоответствиеКолонок[МассивКолонок[НомерКолонки]];
				СтруктураСтроки.Вставить(НаименованиеКолонкиБД, 
					ПолучитьЗначениеЯчейки(ТабличныйДокумент, НомерСтроки, НомерКолонки)); 	
			КонецЦикла;    
			МассивДанных.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивДанных);
	КонтекстЧтения.ДанныеJSON = ЗаписьJSON.Закрыть();	
	
КонецПроцедуры  

// Получает данные считанные из файлов за определенный период
//
// Параметры:
// 	ПериодНачало - Дата - начало периода выборки
// 	ПериодОкончание - Дата - окончание периода выборки 
// 	ТипОтчета - ПеречислениеСсылка.revagro_ТипыОтчетов - тип считываемого отчета
// 	
// 	Возвращаемое значение:
// 	 ТаблицаЗначений - данные строки из JSON из РС revagro_ДанныеСОборудования
//
Функция ПолучитьДанныеСОборудованияЗаПериод(ПериодНачало, ПериодОкончание, ТипОтчета) Экспорт	
	
	ТЗРезультат = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	revagro_ДанныеСОборудования.ДанныеСтрокиJSON КАК ДанныеСтрокиJSON
	|ИЗ
	|	РегистрСведений.revagro_ДанныеСОборудования КАК revagro_ДанныеСОборудования
	|ГДЕ
	|	revagro_ДанныеСОборудования.ДатаОперации МЕЖДУ &ПериодНачало И &ПериодОкончание
	|	И revagro_ДанныеСОборудования.ТипОтчета = &ТипОтчета"); 
	Запрос.УстановитьПараметр("ПериодНачало", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодОкончание", ПериодОкончание);
	Запрос.УстановитьПараметр("ТипОтчета", ТипОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Если Выборка.Следующий() Тогда    
		
		ДанныеПервойСтроки = ИзJSONВДанные(Выборка.ДанныеСтрокиJSON);
		Для Каждого Колонка Из ДанныеПервойСтроки Цикл
			ТЗРезультат.Колонки.Добавить(Колонка.Ключ);	
		КонецЦикла; 
		
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
			ДанныеСтроки = ИзJSONВДанные(Выборка.ДанныеСтрокиJSON);
			НоваяСтрока = ТЗРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		КонецЦикла
		
	КонецЕсли; 
	
	Возврат ТЗРезультат;
	
КонецФункции  

// Получает значение ячейки табличного документа по строке и колонке
//
// Параметры:
// 	ТабДок - ТабличныйДокумент
// 	Стр - Число - индекс строки
// 	Кол - Число - индекс колонки
// 	
// 	Возвращаемое значение:
// 	 Строка - значение текста в ячейке
//
Функция ПолучитьЗначениеЯчейки(ТабДок, Стр, Кол) Экспорт
	
	Если Кол = 0 Тогда
		Возврат "";
	КонецЕсли; 
	
	Содержимое = Табдок.Область("R" + Формат(Стр, "ЧГ=") + "C" + Формат(Кол, "ЧГ=")).Текст;
	Возврат СокрЛП(Содержимое);
	
КонецФункции      

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНастройкуТекущегоФайла(Файл, НастройкиЧтения)  
	
	Настройки = Новый Структура; 
	Если Файл.Расширение = ".csv" Тогда
		Настройка = НастройкиЧтения.НайтиСтроки(
			Новый Структура("РасширениеФайла", Перечисления.revagro_РасширенияФайлов.csv));
	ИначеЕсли Файл.Расширение = ".xlsx" Тогда
		Настройка = НастройкиЧтения.НайтиСтроки(
			Новый Структура("РасширениеФайла", Перечисления.revagro_РасширенияФайлов.xlsx)); 
	Иначе
		ВызватьИсключение "Не совместимый тип входног файла!"
	КонецЕсли;
		
	ТекущаяНастройка = Неопределено;
	КоличествоСовпадений = 0;
	Для Каждого Стр Из Настройка Цикл
		Если СтрНачинаетсяС(Файл.Имя, Стр.ПрефиксИмениФайла) Тогда
			ТекущаяНастройка = Стр.Ссылка;
			КоличествоСовпадений = КоличествоСовпадений + 1;
		КонецЕсли
	КонецЦикла;
	
	Если ТекущаяНастройка = Неопределено Тогда
		ВызватьИсключение "Настройка не найдена";	
	КонецЕсли;
	
	Если КоличествоСовпадений > 1 Тогда
		ВызватьИсключение "Найдено больше одной настройки";
	КонецЕсли;
	
	Если ТекущаяНастройка.СоответствиеРеквизитовФайла.Количество() = 0 Тогда
		ВызватьИсключение "В найденной настройке неопределено соответствие реквизитов";
	КонецЕсли;
	
	СоответствиеКолонок = Новый Соответствие;
	Для Каждого Стр Из ТекущаяНастройка.СоответствиеРеквизитовФайла Цикл
		СоответствиеКолонок.Вставить(Стр.ИмяРеквизитаВФайле, Стр.ИмяРеквизитаБД);	
	КонецЦикла; 
	
	СоответствиеТипов = Новый Соответствие;
	Для Каждого Стр Из ТекущаяНастройка.СоответствиеРеквизитовФайла Цикл
		СоответствиеТипов.Вставить(Стр.ИмяРеквизитаБД, Стр.ТипПоля);	
	КонецЦикла;
	
	Настройки.Вставить("СоответствиеКолонок", СоответствиеКолонок);
	Настройки.Вставить("СоответствиеТипов", СоответствиеТипов);
	Настройки.Вставить("ТипОтчета", ТекущаяНастройка.ТипОтчета);
	
	Возврат Настройки;
	
КонецФункции

Процедура ПроверитьСоответствиеКолонокФайлу(МассивКолонок, Настройки)  
	
	МассивКолонокБезСоответствия = Новый Массив;
	СоответствиеКолонок = Настройки.СоответствиеКолонок;
	Для Каждого Колонка Из МассивКолонок Цикл 
		Если СоответствиеКолонок[Колонка] = Неопределено Тогда
			МассивКолонокБезСоответствия.Добавить(Колонка);	
		КонецЕсли	
	КонецЦикла;
	Если МассивКолонокБезСоответствия.Количество() Тогда
		ВызватьИсключение СтрШаблон("Для колонок %1 не определено соответствие.", СтрСоединить(МассивКолонокБезСоответствия, ", "));
	КонецЕсли;	           
	
КонецПроцедуры

Функция ПолучитьПустуюСтруктуруЗаполненияСтрокиРСДанныеСОборудования()
	
	ПоляСтруктуры = "ИмяФайла, ПорядковыйНомерСтроки, ДанныеСтрокиJSON, ДатаОперации, ТипОтчета";
	
	Возврат Новый Структура(ПоляСтруктуры);
	
КонецФункции

Функция ПолучитьJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПолучитьНастройкиФайлов()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	revagro_НастройкиЧтенияФайлов.ПрефиксИмениФайла КАК ПрефиксИмениФайла,
	|	revagro_НастройкиЧтенияФайлов.Ссылка КАК Ссылка,
	|	revagro_НастройкиЧтенияФайлов.РасширениеФайла КАК РасширениеФайла,
	|	revagro_НастройкиЧтенияФайлов.СоответствиеРеквизитовФайла.(
	|		ИмяРеквизитаВФайле КАК ИмяРеквизитаВФайле,
	|		ИмяРеквизитаБД КАК ИмяРеквизитаБД
	|	) КАК СоответствиеРеквизитовФайла
	|ИЗ
	|	Справочник.revagro_НастройкиЧтенияФайлов КАК revagro_НастройкиЧтенияФайлов
	|ГДЕ
	|	НЕ revagro_НастройкиЧтенияФайлов.ПометкаУдаления"); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Функция ИзJSONВДанные(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции
	
#КонецОбласти